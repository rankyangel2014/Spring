<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
 	   xmlns:jee="http://www.springframework.org/schema/jee" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd 
       http://www.springframework.org/schema/jee 
       http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/mvc 
       http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"> 
       
 	<!--注释的spring MVC Bean的自动注入配置,必须要放在spring-servlet.xml的配置文件中，否则无效;
 		此处只应该加载表现层组件，如果此处还加载dao层或service层的bean会将之前容器加载的替换掉，
 		而且此处不会进行AOP织入，所以会造成AOP失效问题（如事务不起作用）
 	-->
	<context:component-scan base-package="com.jsjn">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/> 
	</context:component-scan>	
		
	<!--通过URL匹配拦截的拦截器
	<bean id="controllerInterceptor" class=" com.jsjn.platform.util.controller.ControllerInterceptor"/>
	 -->
	<!--
    	启动Spring MVC的注解功能,完成请求到注释POJO的自动映射。
    	注意： 如果使用了<mvc:annotation-driven />，
    	它会自动注册DefaultAnnotationHandlerMapping 与AnnotationMethodHandlerAdapter 这两个bean，
    	所以就没有机会再给它注入interceptors属性，就无法指定拦截器.
    	DefaultAnnotationHandlerMapping 与AnnotationMethodHandlerAdapter 必须同时配置，否则mvc的注释无效
    -->
 	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
 	  	<property name="interceptors">  
        	<list>  
           		<!--ref bean="controllerInterceptor" /-->  
        	</list>  
       	</property> 
 	</bean>
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="webBindingInitializer">
			<bean class="com.jsjn.platform.util.controller.WebBindInitializer"/>
		</property>
	</bean>	
	
	<!-- 类名匹配 --> 
	<bean id="controllerClassNameHandlerMapping" class="org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping">  
	<property name="basePackage" value="com.jsjn.*"></property>
	<property name="urlPathHelper"> 
	        <bean class="org.springframework.web.util.UrlPathHelper"> 
	            <property name="urlDecode" value="true"></property> 
	            <property name="defaultEncoding" value="UTF-8"></property> 
	        </bean> 
	    </property> 
	</bean>
		
 	<!--对于没有注解的的静态资源通过这里的配置映射，可以是jar包中的资源-->  
    <mvc:resources mapping="/com/jsjn/**" location="/com/jsjn/,classpath:/com/jsjn/"/>
    
	
	<!--没有配置映射的通过servlet容器默认的servlet访问。tomcat,weblogic,websphere 的默认servlet类不一样-->
	<mvc:default-servlet-handler /> 
	
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="104857600" />
     <property name="maxInMemorySize" value="4096" />
     <property name="defaultEncoding" value="UTF-8"></property>
	</bean>
</beans>