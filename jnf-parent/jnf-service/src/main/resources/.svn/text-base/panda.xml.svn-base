<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:panda="http://panda.jsjn.com/schema/panda"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd 
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/aop  
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
		http://panda.jsjn.com/schema/panda 
		classpath:/panda.xsd"
	default-lazy-init="true">

	<bean class="com.jsjn.jnf.common.security.DataBaseEncrypt">
		<property name="locations">
			<list>
				<value>jdbc.properties</value>
				<value>classpath:0aa7052e738a4e43aefa38380f6fda4c.properties</value>
			</list>
		</property>
		<property name="fileEncoding">
			<value>UTF-8</value>
		</property>
	</bean>

	<panda:filters>
		<panda:filter className="com.jsjn.jnf.filter.CommonPandaFilter" />
		<panda:filter className="com.jsjn.log4p.filter.Log4pPandaFilter" />
	</panda:filters>

	<bean id="signatureServiceHandler" class="com.jsjn.jnf.common.security.SignatureServiceHandler"
		init-method="init">
		<property name="filePath">
			<value>${certFilePath}</value>
		</property>
		<property name="keystorePasswd">
			<value>${keystorePasswd}</value>
		</property>
	</bean>
	<bean id="saltManager" class="com.jsjn.jnf.common.security.SaltManager"
		init-method="init" lazy-init="false">
		<property name="filePath">
			<value>${saltFilePath}</value>
		</property>
		<property name="debugMode">
			<value>${saltDebugMode}</value>
		</property>
	</bean>
	
	<!-- 苏宁公钥证书配置 -->
	<bean id="cryptoUtil" class="com.jsjn.jnf.common.utils.CryptoUtil"
		init-method="init" lazy-init="false">
		<property name="suningCertFilePath">
			<value>classpath:yifubao.cer</value>
		</property>
	</bean>
	
	<!-- linkQ变量配置-->
    <bean id="LinkQConfig" class="com.jsjn.jnf.common.linkq.LinkQConfig"
        init-method="init" lazy-init="false">
        <property name="configFilePath">
            <value>platform_config/platform.properties</value>
        </property>
    </bean>

	<import resource="panda-config.xml" />

	<!--Spring JDBC LOB类型读写支持类 -->
	<bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler"
		lazy-init="true" />

	<!-- 扫描basePackage下所有以@MyBatisDao注解的接口 -->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="basePackage" value="com.jsjn.jnf" />
		<property name="annotationClass"
			value="com.jsjn.jnf.persistence.annotation.MyBatisDao" />
	</bean>

	<!-- 该 BeanPostProcessor 将自动起作用，对标注 @Autowired 的 Bean 进行自动注入 -->
	<bean
		class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />

	<context:component-scan base-package="com.jsjn.jnf">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<!--<context:annotation-config/> -->
	
	<!-- 配置定时任务--> 
    <task:scheduled-tasks> 
        <!-- 查询并更新代扣状态 10分钟触发一次 --> 
        <task:scheduled ref="timeTask" method="updateWithHoldStateTimerTask" cron="0 0/10 * * * ?"/>
        <!-- 消息推送 每隔1分钟执行一次-->
        <task:scheduled ref="messageSenderTask" method="execute" cron="0 0/1 * * * ?"/>
       	<!-- 批量代扣定时任务每隔5分钟执行一次 -->
        <task:scheduled ref="batchWithholdTimeTask" method="execute"  cron="0 0/5 * * * ?"/>
        <!-- 查询并更新代付状态  每隔10秒钟触发一次 --> 
        <!-- <task:scheduled ref="singlePaymentTimeTask" method="updatePaymentStateTimerTask" cron="0/10 * * * * ?"/> -->
    </task:scheduled-tasks> 
   
</beans>
