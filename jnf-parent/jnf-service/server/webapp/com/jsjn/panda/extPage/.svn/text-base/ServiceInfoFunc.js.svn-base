/**
 * generated by JNGU-2012-ExtPlugins. please write here
 * com.jsjn.panda.extPage.ServiceInfo's method: Javascript class static method
 * be used as ExtJs's event method handler,like
 * 'com.jsjn.panda.extPage.ServiceInfo.method(); this is Class static method'
 * Javasctipt object method be used as get or set object's properties,like
 * 'com.jsjn.panda.extPage.ServiceInfo.prototype.method(); this is object's
 * method' com.jsjn.panda.extPage.ServiceInfo.PANEL is
 * com.jsjn.panda.extPage.ServiceInfo's Singleton instance object . you can get
 * com.jsjn.panda.extPage.ServiceInfo.PANEL's reference by
 * appfram.getInstance('com.jsjn.panda.extPage.ServiceInfo').
 */
//缓存方法信息的一个map
//key:serviceName+"#"+methodName
//value:service树的叶子节点
var nodeMap = {};
//判断是否缓存了方法信息，在第一次点击树节点的时候进行缓存
var cached = false;
//缓存参数中涉及到的java bean
//key:不带包名的类名
//value:一个数组，元素是json对象，{name:属性名, type:属性类型}
var beanCache = {};
//服务器上的节点信息
var nodeInfo = {};
//当前选中的树节点
var curTreeNode = {};
//当前编辑的流程的接口节点
var curProStart = null;
//是否是编辑模式
var editing = false;
//双击grid的cell，将要编辑该节点的属性
var editingNode = null;
//当前编辑的服务的regid
var regid = "";
//参数表格被双击时的rowIndex
var index;
//设置参数的子窗口
var subWin;
//新建服务的子窗口
var newServWin;
//修改服务的子窗口
var modifyServWin;
//服务树(可搜索)
var serviceTree;

appframe.afterInstance("com.jsjn.panda.extPage.ServiceInfo",function(p){
	//构建服务树
	serviceTree = new com.jsjn.ext.extend.FilterTree({
		id: "serviceTree2",
//		showUnmatchChild: true,//true: 显示匹配节点的所有子节点，默认false
		checkMode: 'single',//single, up, down, up_down, 不填
		autoScroll: true,
		border: false,
		listeners : {
			dblclick : {
				fn : function(node, e) {
					return treeNodeDbClk(node, e);
				}
			},
			click : {
				fn : function(node, e) {
					return treeNodeClk(node, e);
				}
			}
		},
//		width: 250,
//		height: 800,
		rootVisible: false,
		emptyText: "请输入搜索条件...",
		dataUrl: appConfig.baseUrl + '/com.jsjn.panda.extPage.ServiceInfo.do?method=getServices'
	});
	Ext.getCmp("serviceTreePanel").add(serviceTree);
	
	//参数表格使用的jsonReader，使用本地数据，需要设置reader
	var jsonReader = new Ext.data.JsonReader({
	 	root: 'root',
	    totalProperty: 'total',
	    fields: [
	        {name: 'seq', mapping: 'seq'},
	        {name: 'name', mapping: 'name'},
	        {name:'dscrpt', mapping:'dscrpt'},
	        {name: 'vtype', mapping: 'vtype'},
	        {name: 'express', mapping: 'express'},
	        {name: 'bz', mapping: 'bz'}
	    ]
	});
	Ext.getCmp("paramList").getStore().reader = jsonReader;
	
	Ext.getCmp("serviceTree2").expandAll();
	
	
	//获取部署在服务器上的节点信息
	Ext.Ajax.request({
		   url: appConfig.baseUrl + "/com.jsjn.panda.extPage.ServiceInfo.do",
		   success: function(res) {
			   nodeInfo = eval("(" + res.responseText + ")");
		   },
		   failure: function() {
			   alert("获取节点信息失败");
		   },
		   params: { method: 'getNodeInfo' }
	});
	
	//获取参数中的javabean信息
	Ext.Ajax.request({
		   url: appConfig.baseUrl + "/com.jsjn.panda.extPage.ServiceInfo.do",
		   success: function(res) {
			   beanCache = eval("(" + res.responseText + ")");
		   },
		   failure: function() {
			   alert("获取java bean信息失败");
		   },
		   params: { method: 'getBeanCache' }
	});
	
	subWin = new Ext.Window({
		   title : '参数设置',
		   maximized : false,
		   isTopContainer : true,
		   closable:false,
		   modal : true,
		   resizable : false,
		   maskDisabled:true,
		   contentEl : Ext.DomHelper.append(document.body, {
			name : 'expEdit',
		    tag : 'iframe',
		    style : "border 0px none;scrollbar:true",
		    src : appConfig.baseUrl+"/com.jsjn.panda.extPage.ExpWind.view",
		    height : "500",
		    width : "1000"
		   })
	});
	subWin.show();
	subWin.setVisible(false);
	subWin.on('show', function() {
		if(editingNode != undefined) {
			expEdit.initSubwin(editing);
		}
	});
	//监听关闭窗口事件
	subWin.on('hide',function(){
		if(editingNode.data("NodeType") == "DivergeGateway") {
		} else if(editingNode.data("NodeType") == "EndEvent") {
		} else {
			var input;
			var pre = editingNode.data("WFattr").pre;
			if(pre.data("NodeType") == "DivergeGateway") {
				if(pre.data("WFattr").sNext == editingNode) {
					input = pre.data("WFattr").Success.In;
				} else {
					input = pre.data("WFattr").Fail.In;
				}
			} else {
				input = pre.data("WFattr").In;
			}
			input.splice(0, input.length);
			var root = editingNode.data("WFattr").params.root;
			for(var i=0;i<editingNode.data("WFattr").params.total;i++) {
				input.push(root[i].express);
			}
		}
	});
	
	newServWin = new Ext.Window({
		   title : '新建服务',
		   maximized : false,
		   isTopContainer : true,
		   closable:false,
		   modal : true,
		   resizable : false,
		   maskDisabled:true,
		   contentEl : Ext.DomHelper.append(document.body, {
			id : 'newServ',
			name : 'newServ',
		    tag : 'iframe',
		    style : "border 0px none;scrollbar:true",
//		    src : appConfig.baseUrl+"/com.jsjn.panda.extPage.NewService.view",
		    height : "400",
		    width : "650"
		   })
	});
	newServWin.show();
	newServWin.setVisible(false);
//	newServWin.on('show', function() {
//		newServ.initSubwin();
//	});
	
	//菜单
	var serviceMenu = new Ext.menu.Menu();
	serviceMenu.add([{
		text: "新建服务",
		handler: createButtonClick
	},{
		text: "修改服务",
		handler: modifyButtonClick
	},{
		text: "删除服务",
		handler: delSerButtonClick
	}
	]);
	
	var flowMenu = new Ext.menu.Menu();
	flowMenu.add([{
		text: "保存流程",
		handler: saveButtonClick
	},{
		text: "导出流程",
		handler: exportButtonClick
	},{
		text: "导入流程",
		handler: importButtonClick
	}
	]);
	Ext.getCmp("mainPanel").getBottomToolbar().setVisible(false);
	var tb = Ext.getCmp("mainPanel").getTopToolbar();
	tb.add({
        text:'服务',
//        iconCls: 'bmenu',  // <-- icon
        menu: serviceMenu  // assign menu by instance
    },'|',{
        text:'流程',
      menu: flowMenu  // assign menu by instance
  },'|',{
	  text:'开始节点',
	  handler: startButtonClick
  },'-',{
	  text:'结束节点',
	  handler: endButtonClick
  },'-',{
	  text:'方法节点',
	  handler: newButtonClick
  },'-',{
	  text:'判断节点',
	  handler: branchButtonClick
  },'-',{
	  text:'是否处于画线状态：画线off',
	  handler: lineButtonClick
  },'-',{
	  text:'删除节点',
	  handler: deleteButtonClick
  },'-',{
	  text:'清空流程图',
	  handler: clearButtonClick
  },'-',{
	  text:'结束编辑',
	  handler: quitButtonClick
  },{
	  xtype: 'tbfill'
  },{
	  text:'全部订阅',
	  handler: allSubButtonClick
  });
	
});

function aaa(item, checked) {
	alert(111);
}

treeNodeClk = function(node, e) {
	if(cached == false) {
		cached = true;
		cacheMethodInfo();
	}
	
	rph().setSelectedObj(null);
	rph().setSelectedLine(null);
	editingNode = null;
	
	if(curTreeNode != null && curTreeNode.node == node) {
		return;
	}
	
	if(node.isLeaf()) {
		var store = Ext.getCmp("paramList").getStore();
		var methodName = node.attributes.methodName;
		var serviceName = node.parentNode.attributes.serviceName;
		
		if(node.parentNode.parentNode.attributes.text == "CommonBean" ||
				node.parentNode.parentNode.attributes.text == "RemoteBean" ||
				node.parentNode.parentNode.attributes.text == "SpringBean") {
//			store.setBaseParam("sType", "commonBean");
			curTreeNode.node = node;
			curTreeNode.type = node.parentNode.parentNode.attributes.text;
			if(editing == true) {
				//编辑模式，流程图不切换
			} else {
				//非编辑模式，页面清空
				rph().initWF();
			}
		} else if(node.parentNode.parentNode.attributes.text == "ComplexBean") {
//			store.setBaseParam("sType", "complexBean");
			curTreeNode.node = node;
			curTreeNode.type = "complexBean";
			if(editing == true) {
				//编辑模式，流程图不切换
			} else {
				//非编辑模式，切换流程图
				var srid = node.attributes.regid;
				var uri = appConfig.baseUrl + "/com.jsjn.panda.extPage.ServiceInfo.do?method=loadProcess";
				rph().loadXMLData(uri,serviceName,methodName,srid);
			}
		} else {
			curTreeNode = {};
		}
		//本地载入
		store.loadData(node.attributes.params);
		//显示所选方法的订阅配置和调用代码
		Ext.getCmp("testsub").setValue("<application id=\""+nodeInfo.nodeId+"\" name=\""+nodeInfo.nodeName+"\" version=\""+nodeInfo.nodeVersion+"\" createdate=\"2013-12-01 12:01:01\" verification=\"true\">\n\t<reference id=\""+node.attributes.regid+"\" failover=\"retry\" version=\""+nodeInfo.serviceVersion+"\" host=\""+nodeInfo.serverIP+":"+nodeInfo.port+"\"/>\n</application>");
		Ext.getCmp("realsub").setValue("<application id=\""+nodeInfo.nodeId+"\" name=\""+nodeInfo.nodeName+"\" version=\""+nodeInfo.nodeVersion+"\" createdate=\"2013-12-01 12:01:01\" verification=\"true\">\n\t<reference id=\""+node.attributes.regid+"\" failover=\"retry\" version=\""+nodeInfo.serviceVersion+"\" />\n</application>");
		Ext.getCmp("testcode").setValue("ServiceTest.test(\""+nodeInfo.nodeId+"\", \""+nodeInfo.nodeVersion+"\", \""+node.attributes.regid+"\", \""+nodeInfo.serviceVersion+"\", \""+nodeInfo.serverIP+"\", "+nodeInfo.port+", Object...);");
		Ext.getCmp("realcode").setValue("PandaCaller.invoke(\""+nodeInfo.nodeId+"\", \""+nodeInfo.nodeVersion+"\", \""+node.attributes.regid+"\", \""+nodeInfo.serviceVersion+"\", Object...);");
		
		var id = Ext.getCmp("propId");
		id.setValue("");
		var ffms = Ext.getCmp("ffms");
		ffms.setValue(node.attributes.dscrpt);
		var fh = Ext.getCmp("fh");
		fh.setValue(node.attributes.fh);
		var gt = Ext.getCmp("goto");
		gt.setValue("");
	} else {
		Ext.getCmp("paramList").getStore().removeAll();
		Ext.getCmp("propId").setValue("");
		Ext.getCmp("ffms").setValue("");
		Ext.getCmp("fh").setValue("");
		Ext.getCmp("goto").setValue("");
		curTreeNode = {};
		if(editing == false) {
			//非编辑模式，页面清空
			rph().initWF();
		}
	}
}
//双击节点进入编辑模式，保存操作后退出编辑模式
treeNodeDbClk = function (node, e) {
	if(node.isLeaf()) {
		if(node.parentNode.parentNode.attributes.text == "ComplexBean") {
			if(editing == false) {
				curProStart = node;
				editing = true;
				regid = node.attributes.regid;
				Ext.getCmp("pdPanel").setTitle("流程图<font color='blue'>（"+node.parentNode.attributes.serviceName+"#"+node.attributes.methodName+" 编辑中）</font>");
			} else {
				alert("正在制定某个流程，请先保存流程");
			}
		}
	}
}

nameRender = function (value, cellmeta, record, rowIndex, columnIndex, store) {
	return strReplace(value);
}
dscrptRender = function (value, cellmeta, record, rowIndex, columnIndex, store) {
	return strReplace(value);
}
expRender = function (value, cellmeta, record, rowIndex, columnIndex, store) {
	return strReplace(value);
}
psRender = function (value, cellmeta, record, rowIndex, columnIndex, store) {
	return strReplace(value);
}
//& ==> &amp;
strReplace = function (str) {
	str = str.replace(new RegExp("&", "gm"), "&amp;");
	str = str.replace(new RegExp("<", "gm"), "&lt;");
	str = str.replace(new RegExp(">", "gm"), "&gt;");
	str = str.replace(new RegExp("'", "gm"), "&apos;");
	str = str.replace(new RegExp('"', "gm"), "&quot;");
	return str;
}
//&amp; ==> &
strReplace2 = function (str) {
	str = str.replace(new RegExp("&lt;", "gm"), "<");
	str = str.replace(new RegExp("&gt;", "gm"), ">");
	str = str.replace(new RegExp("&apos;", "gm"), "'");
	str = str.replace(new RegExp("&quot;", "gm"), '"');
	str = str.replace(new RegExp("&amp;", "gm"), "&");
	return str;
}
//paramList表格双击事件，弹出参数编辑窗口
gridDbclick = function (grid, rowIndex, columnIndex, e) {
	openSubwin(rowIndex);
}
//创建开始节点
startButtonClick = function (button, event) {
	if(editing == false) {
		alert("不可编辑");
		return;
	}
	var sname = curProStart.parentNode.attributes.serviceName;
	var mname = curProStart.attributes.methodName;
	var rid = curProStart.attributes.regid;
	newStart(sname, mname, rid, 0, 0);	
}
function newStart(sname, mname, rid, x, y) {
	var start = rph().newNode('StartEvent',parseInt(x),parseInt(y));
	var attr = start.data("WFattr");
	//从树节点中获得输入输出信息
	attr.ffms = mname;
	var orin = nodeMap[sname+"#"+mname+"#"+rid].attributes.params;
	attr.params = clone(orin);
	attr.fh = nodeMap[sname+"#"+mname+"#"+rid].attributes.fh;
	return start;
}
//创建结束节点
endButtonClick = function (button, event) {
	if(editing == false) {
		alert("不可编辑");
		return;
	}
	var sname = curProStart.parentNode.attributes.serviceName;
	var mname = curProStart.attributes.methodName;
	var rid = curProStart.attributes.regid;
	newEnd(sname, mname, rid, 0, 0);	
}
function newEnd(sname, mname, rid, x, y) {
	var end = rph().newNode('EndEvent',parseInt(x),parseInt(y));
	var attr = end.data("WFattr");
	//从树节点中获得输入输出信息
	attr.ffms = mname;
	attr.fh = nodeMap[sname+"#"+mname+"#"+rid].attributes.fh;
	if(attr.fh == "void") {
		attr.params = {root:[], total:0}
	} else {
		attr.params = {root:[{dscrpt:"", name:"", seq:1, vtype:attr.fh, zip:nodeMap[sname+"#"+mname+"#"+rid].attributes.zip}], total:1};
	}
	var id = end.data("WFattr").Id;
	end.data("text").attr("text", attr.fh);
	return end;
}
//创建service节点
newButtonClick = function (button, event) {
	if(editing == false) {
		alert("不可编辑");
		return;
	}
	var sname = curTreeNode.node.parentNode.attributes.serviceName;
	var mname = curTreeNode.node.attributes.methodName;
	var rid = curTreeNode.node.attributes.regid || "";
	newCom(sname, mname, rid, 0, 0);
}
function newCom(sname, mname, rid, x, y) {
	var n = rph().newNode('ScriptTask',parseInt(x),parseInt(y));
	var attr = n.data("WFattr");
	//从树节点中获得输入输出信息
	attr.ffms = mname;
	attr.ServiceName = sname;
	attr.MethodName = mname;
	attr.MethodType = curTreeNode.type;
	attr.RegId = rid;
	
	var orin = nodeMap[sname+"#"+mname+"#"+rid].attributes.params;
	attr.params = clone(orin);
	attr.fh = nodeMap[sname+"#"+mname+"#"+rid].attributes.fh;
	
	var id = n.data("WFattr").Id;
	n.data("text").attr("text", "id: "+id+"\n"+mname);
	
	return n;
}
//创建判断节点
branchButtonClick = function (button, event) {
	if(editing == false) {
		alert("不可编辑");
		return;
	}
	newBranch(0, 0);
}
function newBranch(x, y) {
	var branch = rph().newNode('DivergeGateway',parseInt(x),parseInt(y));
	branch.data("WFattr").params = {root:[{dscrpt:"判断表达式", name:"", seq:1, vtype:""}], total:1};
	return branch;
}
//设置是否处于画线状态
lineButtonClick = function (button, event) {
	var r = rph();
	var mode = r.changeMode();
	var lineBtn = button;//Ext.getCmp("line");
	if(mode == "off") {
		lineBtn.setText("是否处于画线状态：画线off");
	} else {
		lineBtn.setText("是否处于画线状态：<font color='blue'>画线on</font>");
	}
}
//选中某个节点后，删除该节点
deleteButtonClick = function (button, event) {
	if(editing == false) {
		alert("不可编辑");
		return;
	}
	var r = rph();
	r.deleteNode(r.selectedObj);
}
//清空流程图
clearButtonClick = function (button, event) {
	if(editing == false) {
		alert("不可编辑");
		return;
	}
	rph().initWF();
}
//保存该流程信息，即上传生成的xml格式字符串
saveButtonClick = function (button, event) {
	if(editing == true) {
		var sname = curProStart.parentNode.attributes.serviceName;
		var mname = curProStart.attributes.methodName;
		var xml = rph().exportXMLData(sname, mname);
		//向服务器发送生成的xmlString
		Ext.Ajax.request({
			   url: appConfig.baseUrl + "/com.jsjn.panda.extPage.ServiceInfo.do",
			   success: function(res) {
				   alert(res.responseText);
			   },
			   failure: function() {
				   alert("failed");
			   },
			   params: { method: 'saveProcess',
				   xml: xml,
				   sname: sname,
				   mname: mname}
			});
		
//		var request = new XMLHttpRequest();
//		request.open("POST", appConfig.baseUrl + "/com.jsjn.panda.extPage.ServiceInfo.do?method=saveProcess&xml="+xml+"&sname="+sname+"&mname="+mname, false);
//		request.send(null);
//		alert(request.responseText);
	} else {
		alert("不可编辑");
	}
}
//下载该流程的xml，待实现
exportButtonClick = function (button, event) {
	if(curTreeNode.node != null && curTreeNode.type == "complexBean") {
		var sname = curTreeNode.node.parentNode.attributes.serviceName;
		var mname = curTreeNode.node.attributes.methodName;
		var xml = rph().exportXMLData(sname, mname);
		window.open(appConfig.baseUrl + "/com.jsjn.panda.extPage.ServiceInfo.do?method=downLoad&xml="+xml+"&sname="+sname+"&mname="+mname, "", null);
	} else {
		alert("请先选择一个流程。");
	}
}
//从本地xml导入流程
importButtonClick = function (button, event) {
	
}

//退出编辑状态
quitButtonClick = function (button, event) {
	editing = false;
	curTreeNode = {};
	Ext.getCmp("pdPanel").setTitle("流程图");
}
//当选中raphael图中某个节点时，显示其数据
showNodeInfo = function(rNode, conn) {
	editingNode = rNode;
	//先清空数据
	Ext.getCmp("paramList").getStore().removeAll();
	Ext.getCmp("goto").setValue("");
	Ext.getCmp("propId").setValue("");
	Ext.getCmp("ffms").setValue("");
	Ext.getCmp("fh").setValue("");
	Ext.getCmp("goto").setValue("");
	
	var attr = rNode.data("WFattr");
	if(rNode.data("NodeType") == "DivergeGateway") {
		Ext.getCmp("paramList").getStore().loadData(attr.params);
		var goTo = "";
		if(attr.sNext != null && attr.sNext != undefined) {
			goTo += "success: "+attr.sNext.data("WFattr").Id+"; ";
		}
		if(attr.fNext != null && attr.fNext != undefined) {
			goTo += "fail: "+attr.fNext.data("WFattr").Id;
		}
		Ext.getCmp("goto").setValue(goTo);
	} else {
		//对于start节点，表格中的参数是整个流程的入参
		Ext.getCmp("paramList").getStore().loadData(attr.params);
		if(attr.next != undefined) {
			Ext.getCmp("goto").setValue(attr.next.data("WFattr").Id);
		}
	}
	//当点击的是节点而不是连线时，显示节点id、方法名、返回类型信息
	if(conn == null) {
		Ext.getCmp("propId").setValue(attr.Id);
		Ext.getCmp("ffms").setValue(attr.ffms);
		Ext.getCmp("fh").setValue(attr.fh);
	} else {
		Ext.getCmp("propId").setValue("");
		Ext.getCmp("ffms").setValue("");
		Ext.getCmp("fh").setValue("");
		Ext.getCmp("goto").setValue(attr.Id);
	}
}
//获得raphael模块所在的子窗口对象
rph = function() {
		return raphael.window;
}
//对象深拷贝
function clone(obj) {  
    if (typeof (obj) != 'object')  
        return obj;  

    var re = {};  
    if (obj.constructor==Array)  
        re = [];  

    for ( var i in obj) {  
        re[i] = clone(obj[i]);  
    }  

    return re;  
}
//缓存方法信息
//key:serviceName+"#"+methodName
//value:service树的叶子节点
function cacheMethodInfo() {
	//根节点 root
	var root = Ext.getCmp("serviceTree2").getRootNode();
	//服务类型节点，spring、common、complex
	var types = root.childNodes;
	//遍历3个类型下的类（接口）
	for(var i = 0;i<types.length;i++) {
//		if(types[i].text != "SpringBean") {
			var beans = types[i].childNodes;
			//遍历类（接口）的每个方法
			for(var j = 0;j<beans.length;j++) {
				var methods = beans[j].childNodes;
				var serviceName = beans[j].attributes.serviceName;
				//遍历并缓存每个方法
				for(var k=0;k<methods.length;k++) {
					var methodName = methods[k].attributes.methodName;
					var rid = methods[k].attributes.regid || "";
					nodeMap[serviceName+"#"+methodName+"#"+rid] = methods[k];
				}
			}
//		}
	}
}
//打开参数设置子窗口的统一方法
function openSubwin(rowIndex) {
	//先判断该节点是否需要设置
	var r = needEdit(editingNode);
	if(r[0] == false) {
		alert(r[1]);
	} else {
		index = rowIndex;
		var r = editingNode.data("WFattr").params.root;
		subWin.setVisible(true);
	}
}
//判断所选节点是否需要设置，返回[boolean, msg]
function needEdit(node) {
	if(node == null || node == undefined) {
		return [false, "树节点无法设置"];
	}
	/*
	 * 1.如果自己是判断节点，肯定有表达式，返回true
	 * 2.如果自己是结束节点，根据有无返回，若void返回false，若非void返回true
	 * 3.如果自己是开始节点，肯定不需要编辑，返回false
	 * 4.如果自己是service节点，且自己需要入参，返回true，否则返回false
	 */
	var type = node.data("NodeType");
	if(type == "StartEvent") {
		return [false, "开始节点不需要设置。"];
	} else if(type == "DivergeGateway") {
		return [true, ""];
	} else if(type == "EndEvent") {
		if(node.data("WFattr").fh == "void") {
			return [false, "该流程无返回值，不需要设置该结束节点。"];
		} else {
			return [true, ""];
		}
	} else if(type == "ScriptTask") {
		var attr = node.data("WFattr");
		if(attr.params.root == undefined || attr.params.root.length == 0) {
			return [false, "该节点无参数，不需要设置。"];
		} else {
			return [true, ""];
		}
	}
}

function createButtonClick(button, event) {
	if(editing == false) {
		newServWin.setTitle("新建服务");
		newServWin.setVisible(true);
		document.getElementById('newServ').src = appConfig.baseUrl+"/com.jsjn.panda.extPage.NewService.view?modify=false";
	} else {
		alert("请先退出编辑模式");
	}
}

function modifyButtonClick(button, event) {
	if(editing == false) {
		newServWin.setTitle("修改服务");
		newServWin.setVisible(true);
		document.getElementById('newServ').src = appConfig.baseUrl+"/com.jsjn.panda.extPage.NewService.view?modify=true";
	} else {
		alert("请先退出编辑模式");
	}
}

function delSerButtonClick(button, event) {
	if(editing == false) {
		if(curTreeNode.type && curTreeNode.type == "complexBean") {
			var con = confirm("确定要删除服务: ["+curTreeNode.node.attributes.regid+"] "+curTreeNode.node.parentNode.attributes.serviceName+"#"+curTreeNode.node.attributes.methodName+" ?");
			if(con) {
				Ext.Ajax.request({
					   url: appConfig.baseUrl + "/com.jsjn.panda.extPage.ServiceInfo.do",
					   success: function(res) {
						   alert(res.responseText);
						   location.reload();
					   },
					   failure: function() {
						   alert("failed");
					   },
					   params: { method: 'deleteService',
						   regid: curTreeNode.node.attributes.regid,
						   serviceName: curTreeNode.node.parentNode.attributes.serviceName,
						   methodName: curTreeNode.node.attributes.methodName }
					});
			}
		} else {
			alert("请先选择要删除的复杂服务");
		}
	} else {
		alert("请先退出编辑模式");
	}
}

function allSubButtonClick(button, event) {
	window.open(appConfig.baseUrl + "/com.jsjn.panda.extPage.ServiceInfo.do?method=subAll", "", null);
}